package goml

import (
	"strings"
)

// Num permits any number
type Num interface {
	type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64,
		uintptr, float32, float64
}

// Id takes any value and returns it
func Id[T any](x T) T {
	return x
}

// Foldl applies the elements in a slice to a function which returns a single
// value
func Foldl[T1, T2 any](f func(T1, T2) T1, acc T1, xs []T2) T1 {
	if Empty(xs) {
		return acc
	}
	return Foldl[T1, T2](f, f(acc, Head(xs)), Tail(xs))
}

// Foldr applies the elements in a slice from right-to-left to a function which
// returns a single value
func Foldr[T1, T2 any](f func(T1, T2) T2, acc T2, xs []T1) T2 {
	if Empty(xs) {
		return acc
	}
	return f(Head(xs), Foldr[T1, T2](f, acc, Tail(xs)))
}

// And returns the conjunction of a slice of bools
func And(xs []bool) bool {
	return Foldr(func(x, y bool) bool { return x && y }, true, xs)
}

// Or returns the disjunction of a slice of bools
func Or(xs []bool) bool {
	return Foldr(func(x, y bool) bool { return x || y }, false, xs)
}

// Xor returns the exclusive disjunction of a slice of bools
func Xor(xs []bool) bool {
	return Foldr(func(x, y bool) bool { return x != y }, false, xs)
}

// Greatest returns the larger of two numbers
func Greatest[T Num](x, y T) T {
	if y > x {
		return y
	}
	return x
}

// Max returns the max number from a slice of numbers
func Max[T Num](xs []T) T {
	return Foldr[T, T](Greatest[T], 0, xs)
}

// ConcatStr takes a slice of strings and joins them into a single string
func ConcatStr(xs []string) string {
	f := func (x, y string) string { return x + y }
	return Foldl[string, string](f, "", xs)
}

// JoinStr joins the elements of a slice, placing the separator string between
// each pair of elements
func JoinStr(xs []string, sep string) string {
	f := func (x, y string) string { return x + sep + y }
	return strings.TrimPrefix(Foldl[string, string](f, "", xs), sep)
}

