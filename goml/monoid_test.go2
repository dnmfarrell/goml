package goml

import (
	"testing"
)

func TestId(t *testing.T) {
	exp := 5
	got := Id(exp)
	if got != exp {
		t.Errorf("Id returns %v instead of %d", got, exp)
	}
}

func TestGreatest(t *testing.T) {
	got := Greatest[int](5, 4)
	if got != 5 {
		t.Errorf("Greatest returns %d out of 5 or 4", got)
	}
	gotFloat := Greatest[float32](1.5, 1.5)
	if gotFloat != 1.5 {
		t.Errorf("Greatest returns %f out of 1.5 or 1.5", gotFloat)
	}
	gotSigned := Greatest[int](-600, -500)
	if gotSigned != -500 {
		t.Errorf("Greatest returns %d out of -600 or -500", gotSigned)
	}
}

func TestMax(t *testing.T) {
	got := Max[int]([]int{1,5,9,3,5})
	if got != 9 {
		t.Errorf("Max returns %d out of [1,5,9,3,5]", got)
	}
	got = Max[int]([]int{})
	if got != 0 {
		t.Errorf("Max returns %d out of []", got)
	}
	got = Max[int]([]int{3})
	if got != 3 {
		t.Errorf("Max returns %d out of []", got)
	}
}

func TestConcatStr(t *testing.T) {
	got := ConcatStr([]string{"home", "gopher", "go2go"})
	if got != "homegophergo2go" {
		t.Errorf("ConcatStr returns %s from [home, gopher, go2go]", got)
	}
	got = ConcatStr([]string{"home"})
	if got != "home" {
		t.Errorf("ConcatStr returns %s from [home]", got)
	}
	got = ConcatStr([]string{})
	if got != "" {
		t.Errorf("ConcatStr returns %s from []", got)
	}
}

func TestJoinStr(t *testing.T) {
	got := JoinStr([]string{"/home", "gopher", "go2go"}, "/")
	if got != "/home/gopher/go2go" {
		t.Errorf("JoinStr returns %s from [/home, gopher, go2go]", got)
	}
	got = JoinStr([]string{"/home"}, "/")
	if got != "/home" {
		t.Errorf("JoinStr returns %s from [/home]", got)
	}
	got = JoinStr([]string{}, "/")
	if got != "" {
		t.Errorf("JoinStr returns %s from []", got)
	}
}

